Infrastructure as Code avec Terraform

# Initial config
gcloud config set run/region us-east1
gcloud config set run/zone us-east1-c

# Créer l'infrastructure
## Creer le fichier
nano main.tf
```
terraform {
  required_providers {
    google = {
      source = "hashicorp/google"
      version = "3.5.0"
    }
  }
}

provider "google" {

  project = "qwiklabs-gcp-02-55b3e165717e"
  region  = "us-west1"
  zone    = "us-west1-c"
}

resource "google_compute_network" "vpc_network" {
  name = "terraform-network"
}
```

## Initialiser
terraform init

## Créer un plan d’execution
terraform plan

## Executer
terraform apply


# Créer une infrastructure d'instances de VM à l'aide de Terraform
(Terraform la cree la VM pour nous, grace a notre fichier .tf)

# Verifier
terraform show

# Modifier l’infrastructure
## Ajouter une ressource a la suite
nano main.tf
```
resource "google_compute_instance" "vm_instance" {
  name         = "terraform-instance"
  machine_type = "e2-micro"

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
    }
  }

  network_interface {
    network = google_compute_network.vpc_network.name
    access_config {
    }
  }
}
```

## Appliquer
terraform apply

## Modifier une ressource(Ajoutez un argument tags à la ressource "vm_instance" pour qu'elle se présente comme suit )
nano main.tf
```
resource "google_compute_instance" "vm_instance" {
  name         = "terraform-instance"
  machine_type = "e2-micro"
  tags         = ["web", "dev"]
  # ...
}
```
## Appliquer
terraform apply

# Modifications destructives
Modifiez comme suit le bloc boot_disk dans la ressource vm_instance de votre fichier de configuration

```
  boot_disk {
    initialize_params {
      image = "cos-cloud/cos-stable"
    }
  }

```
terraform apply

# Détruire l'infrastructure
terraform destroy

# Créer des dépendances de ressources
## Recreer
terraform apply

# Attribuer une adresse IP statique
Vous allez maintenant compléter votre configuration en attribuant une adresse IP statique à l'instance de VM dans main.tf
```
resource "google_compute_address" "vm_static_ip" {
  name = "terraform-static-ip"
}
```

# Plan d’execution
terraform plan

## Mettez à jour comme suit le bloc de configuration network_interface de votre instance :
```
  network_interface {
    network = google_compute_network.vpc_network.self_link
    access_config {
      nat_ip = google_compute_address.vm_static_ip.address
    }
  }
```

## Réexécutez "terraform plan" en veillant cette fois à enregistrer le plan
terraform plan -out static_ip

## Exécutez terraform apply "static_ip" pour voir comment Terraform prévoit d'appliquer cette modification 
terraform apply "static_ip"

## Dépendances implicites et explicites
Ajoutez un bucket Cloud Storage et une instance ayant une dépendance explicite avec ce bucket en incluant le code suivant dans main.tf
```
# New resource for the storage bucket our application will use.
resource "google_storage_bucket" "example_bucket" {
  name     = “shermine2000”
  location = "US"

  website {
    main_page_suffix = "index.html"
    not_found_page   = "404.html"
  }
}

# Create a new instance that uses the bucket
resource "google_compute_instance" "another_instance" {
  # Tells Terraform that this VM instance must be created only after the
  # storage bucket has been created.
  depends_on = [google_storage_bucket.example_bucket]

  name         = "terraform-instance-2"
  machine_type = "e2-micro"

  boot_disk {
    initialize_params {
      image = "cos-cloud/cos-stable"
    }
  }

  network_interface {
    network = google_compute_network.vpc_network.self_link
    access_config {
    }
  }
}
```

## Appliquer
terraform plan
terraform apply
